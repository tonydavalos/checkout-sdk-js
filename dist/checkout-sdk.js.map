{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/order/order-params.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/order/spam-protection/create-spam-protection.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","ShippingStrategyActionType","CheckoutActionType","standard_error_StandardError","StandardError","message","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","RequestError","response","_a","_b","errors","_c","ConfigActionType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","ContentType","SpamProtectionActionType","PaymentActionType","InvalidArgumentError","HOSTED","OFFLINE","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","PaymentMethodInvalidError","ErrorActionType","PaymentMethodActionCreator","_requestSender","loadPaymentMethods","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","timeout","Accept","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","data","_common_utility__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","result","concat","map","item","amountTransformer","amount_transformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","map_to_internal_line_item","mapToInternalLineItemType","INTERNAL_USE_ONLY","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","getKey","args","_i","arguments","_resolveMap","apply","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","bindDecorator","target","descriptor","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","method","boundMethod","set","CheckoutIncludes","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","isPrivate","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","action","payload","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","ShippingNotInitialized","AmountTransformer","_decimalPlaces","Math","round","pow","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","test","anchor","document","createElement","href","hash","hostname","pathname","port","protocol","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","useCache","fn","resolver","instanceMethods","cache_key_resolver","external_lodash_","external_rxjs_","pipe","operators_","store","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","loadCheckout","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","LoadCheckoutFailed","loadDefaultCheckout","context","getState","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","updateCheckout","checkout","getCheckout","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","consignment","state","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","request","DEFAULT_PARAMS","join","ConsignmentRequestSender","put","delete","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","request_error","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","timeout_error","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","error_actions","ClearError","isClearErrorAction","omit_deep","DEFAULT_STATE","statuses","billingAddressReducer","data_store_","dataReducer","errorsReducer","statusesReducer","reducer","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","loadError","UpdateBillingAddressRequested","updateError","UpdateBillingAddressFailed","ContinueAsGuestRequested","continueAsGuestError","ContinueAsGuestFailed","isLoading","isUpdating","isContinuingAsGuest","cart_reducer_DEFAULT_STATE","cartReducer","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_reducer_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","initializeError","InitializeButtonFailed","DeinitializeButtonRequested","deinitializeError","DeinitializeButtonFailed","isInitializing","isDeinitializing","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_reducer_DEFAULT_STATE","couponReducer","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","applyCouponError","ApplyCouponFailed","RemoveCouponRequested","removeCouponError","RemoveCouponFailed","isApplyingCoupon","isRemovingCoupon","gift_certificate_reducer_DEFAULT_STATE","giftCertificateReducer","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","applyGiftCertificateError","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","removeGiftCertificateError","RemoveGiftCertificateFailed","isApplyingGiftCertificate","isRemovingGiftCertificate","customer_reducer_DEFAULT_STATE","customerReducer","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","customerStrategyReducer","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isSigningIn","isSigningOut","isWidgetInteracting","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_reducer_DEFAULT_STATE","orderReducer","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","spam_protection_actions","TokenExpired","spamProtectionToken","Completed","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","gateway","newArray","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","settings","UpdateRemoteCheckout","consignment_reducer_DEFAULT_STATE","updateShippingOptionError","isUpdatingShippingOption","consignmentReducer","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","isLoadingShippingOptions","isCreating","shipping_country_reducer_DEFAULT_STATE","shippingCountryReducer","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","shippingStrategyReducer","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","checkout_reducer_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","billing_address_selector","BillingAddressSelector","_billingAddress","getBillingAddress","getUpdateError","getContinueAsGuestError","getLoadError","selector_decorator","cart_selector","CartSelector","_cart","checkout_button_selector","CheckoutButtonSelector","_checkoutButton","getInitializeError","getDeinitializeError","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","config_selector","ConfigSelector","_config","getConfig","getStoreConfig","storeConfig","getExternalSource","externalSource","coupon_selector","CouponSelector","_coupon","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","gift_certificate_selector","GiftCertificateSelector","_giftCertificate","getGiftCertificates","customer_selector","CustomerSelector","_customer","getCustomer","CustomerStrategySelector","_customerStrategies","getSignInError","getSignOutError","getWidgetInteractionError","form_selector","FormSelector","getShippingAddressFields","countries","countryCode","selectedCountry","formFields","shippingAddressFields","field","_processField","getBillingAddressFields","billingAddressFields","_processCountry","_processProvince","_processsPostCode","country","items","label","fieldType","itemtype","subdivisions","required","hasPostalCodes","Boolean","country_selector","CountrySelector","_countries","getCountries","order_selector","OrderSelector","_order","_coupons","getOrder","getOrderMeta","payment_selector","PaymentSelector","_checkout","getPaymentId","internalPayment","_getInternalPayment","providerId","gatewayId","_getHostedPayment","_getGatewayPayment","getPaymentStatus","replace","step","getPaymentToken","getPaymentRedirectUrl","redirectUrl","isPaymentDataRequired","useStoreCredit","grandTotal","getGrandTotal","isPaymentDataSubmitted","paymentMethod","nonce","payment_status_types","payments","providerType","payment_method_types","payment_method_selector","PaymentMethodSelector","_paymentMethods","getPaymentMethods","getPaymentMethodsMeta","getPaymentMethod","getLoadMethodError","payment_strategy_selector","PaymentStrategySelector","_paymentStrategies","getExecuteError","getFinalizeError","getWidgetInteractingError","InstrumentSelector","_instruments","getInstruments","getInstrumentsMeta","getDeleteError","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","shipping_address_selector","ShippingAddressSelector","_consignments","getShippingAddress","shipping_country_selector","ShippingCountrySelector","_shippingCountries","getShippingCountries","shipping_strategy_selector","ShippingStrategySelector","_shippingStrategies","getUpdateAddressError","getSelectOptionError","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","consignment_selector","ConsignmentSelector","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","getUpdateShippingOptionError","isAssigningItems","checkout_selector","CheckoutSelector","_giftCertificates","storeCredit","max","createInternalCheckoutSelectors","checkoutButton","customerStrategies","customer_strategy_selector","form","instruments","instrument_selector","paymentMethods","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","stateTransformer","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","mapToInternalCoupon","couponTypes","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","checkout_button_error_selector","CheckoutButtonErrorSelector","getInitializeButtonError","getDeinitializeButtonError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonStrategyActionCreator","_registry","_paymentMethodActionCreator","throw_error_action","checkout_button_method_type","BraintreePaypalButtonStrategy","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","bind_decorator","masterpass_button_strategy","MasterpassButtonStrategy","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","get_callback_url","PaypalButtonStrategy","_host","merchantId","clientId","actions","internal_api_headers","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","create_checkout_store","requestSender","request_sender_","formPoster","form_poster_","checkout_button_initializer","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","script_loader_","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","create_googlepay_payment_processor","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","NotEmbeddableError","UnknownError","standard_error","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","reject","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","STORAGE_PREFIX","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","TimeoutError","selectorDecorator","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","selectorMethodDecorator","joinIncludes","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","continueAsGuest","credentials","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","customerId","fullName","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderMeta","customerCanBeCreated","mapToInteralOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","ErrorActionCreator","clearError","getEnvironment","process","NODE_ENV","e","ConsoleLogger","_console","log","messages","_logToConsole","info","warn","debug","NoopLogger","isEnabled","logger","console_logger","console","noop_logger","getDefaultLogger","CouponActionCreator","_couponRequestSender","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","GiftCertificateActionCreator","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","CustomerStrategyActionCreator","_strategyRegistry","signIn","signOut","widgetInteraction","AmazonPayScriptLoader","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","JPMC","RemoteCheckoutRequestSender","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","CustomerActionCreator","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutActionCreator","amazonOptions","not_implemented_error","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","BraintreeVisaCheckoutCustomerStrategy","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","braintreevisacheckout","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","CountryActionCreator","_countryRequestSender","loadCountries","CountryRequestSender","Accept-Language","OrderRequestSender","loadOrder","submitOrder","finalizeOrder","OrderActionCreator","_orderRequestSender","_checkoutValidator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","checkoutSettings","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","SpamProtectionActionCreator","_googleRecaptcha","callbacks","recaptchaSitekey","googleRecaptchaSitekey","callback","expired-callback","onExpire","expire","GoogleRecaptcha","googleRecaptchaScriptLoader","sitekey","recaptcha","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","grecaptcha","PaymentStrategyType","OrderFinalizationNotRequiredError","payment_strategy_type","PaymentStrategyActionCreator","_orderActionCreator","execute","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","CartChangedError","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","isVaultedInstrument","OrderIncludes","PaymentActionCreator","_paymentRequestSender","submitPayment","SubmitPaymentRequested","_getPaymentRequestBody","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","map_to_internal_customer","authToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","geoCountryCode","source","paymentMethodSelector","PaymentRequestSender","_transformResponse","statusText","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","paymentSettings","PaymentArgumentInvalidError","invalidFields","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_affirmScriptLoader","publicKey","affirm","_affirm","payment_argument_invalid_error","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","_d","_e","customItems","_f","_g","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","affirmJs","Function","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","_displayModal","afterpay","orderPayload","countryName","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","AfterPay","isInternalAddressEqual","ignoredKeys","is_private","mapFromInternalAddress","AmazonPayPaymentStrategy","_billingAddressActionCreator","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","Overlay","_element","_createElement","parentElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","promise","cancellable","cancel","race","BraintreePaymentProcessor","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","cancellable_promise","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","shouldSaveInstrument","tokenizedCard","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","BraintreeVisaCheckoutPaymentStrategy","_paymentStrategyActionCreator","visaInitOptions","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","ConvergePaymentStrategy","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","CreditCardPaymentStrategy","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","setup","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","square","_squareOptions","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","PaymentMethodDeclinedError","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","payment_method_declined_error","onCheckout","openModal","externalId","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","payment_strategy_registry","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","paymentStrategyActionCreator","payment_strategy_action_creator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","shopperCurrency","isTransactional","InstrumentResponseTransformer","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","iin","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","selectOption","mergedOptions","AmazonPayShippingStrategy","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","checkout_store_selector","CheckoutStoreSelector","_form","_payment","_shippingAddress","getShippingOptions","availableShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","checkout_store_error_selector","CheckoutStoreErrorSelector","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getSelectShippingOptionError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getUpdateCheckoutError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isSelectingShippingOption","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isUpdatingCheckout","createCheckoutSelectors","ErrorMessageTransformer","_messageCustomizer","input","trim","CheckoutService","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_spamProtectionActionCreator","isDevelopment","_errorTransformer","error_message_transformer","isCheckoutServiceError","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","createCheckoutService","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","createCustomerStrategyRegistry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","createShippingStrategyRegistry","spam_protection_action_creator","google_recaptcha","google_recaptcha_script_loader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","create_checkout_button_initializer","embed_checkout","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","mapToInternalCart","promotions","notifications","map_to_internal_line_items","map_to_internal_coupon","promotion","banners","banner","placeholders","messageHtml","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 137);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    TokenExpired = 'SPAM_PROTECTION_TOKEN_EXPIRED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    CompletedAction |\n    TokenExpiredAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface TokenExpiredAction extends Action {\n    type: SpamProtectionActionType.TokenExpired;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"iframe-resizer\");","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection/spam-protection-actions';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n    case SpamProtectionActionType.TokenExpired:\n        return {\n            ...meta,\n            spamProtectionToken: undefined,\n        };\n    case SpamProtectionActionType.Completed:\n        return action.payload ? {\n            ...meta,\n            spamProtectionToken: action.payload,\n        } : meta;\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const grandTotal = this._checkout.getGrandTotal(useStoreCredit);\n\n        return grandTotal ? grandTotal > 0 : false;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getGrandTotal(useStoreCredit?: boolean): number | undefined {\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions, callbacks: SpamProtectionCallbacks): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.render(containerId, recaptchaSitekey, {\n                callback: callbacks.onComplete,\n                'expired-callback': callbacks.onExpire,\n            })\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    complete(token: string): SpamProtectionAction {\n        return createAction(SpamProtectionActionType.Completed, token);\n    }\n\n    expire(): SpamProtectionAction {\n        return createAction(SpamProtectionActionType.TokenExpired);\n    }\n}\n\nexport interface SpamProtectionCallbacks {\n    onComplete(token: string): void;\n    onExpire(): void;\n}\n","import GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default class GoogleRecaptcha {\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader\n    ) {}\n\n    render(containerId: string, sitekey: string, callbacks: GoogleRecaptchaCallbacks): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    ...callbacks,\n                });\n            });\n    }\n}\n\ninterface GoogleRecaptchaCallbacks {\n    callback(token: string): void;\n    'error-callback'?(): void;\n    'expired-callback'?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._getPaymentRequestBody({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(state.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(sellerId, referenceId, paymentPayload.methodId, useStoreCredit, options);\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return new Promise((resolve, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {\n                            });\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n        const useStoreCredit = !!payload.useStoreCredit;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(payment.methodId, { useStoreCredit })\n            ))\n            .then(()  => {\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options))\n                    .then(state => {\n                        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n                    })\n                    .then(() => new Promise<string | undefined>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                                    return this._prepareForReferredRegistration(payment.methodId, checkoutId)\n                                        .then(() => resolve());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                if (state === ZipModalEvent.CheckoutDeclined) {\n                                    return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce => {\n                        if (nonce !== undefined) {\n                            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                methodId: payment.methodId,\n                                paymentData: { nonce },\n                            }));\n                        }\n\n                        return this._store.getState();\n                    }\n                    ));\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options, {\n            onComplete: token => this._dispatch(this._spamProtectionActionCreator.complete(token), { queueId: 'spamProtection' }),\n            onExpire: () => this._dispatch(this._spamProtectionActionCreator.expire(), { queueId: 'spamProtection' }),\n        });\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        new SpamProtectionActionCreator(createSpamProtection(new ScriptLoader()))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(new GoogleRecaptchaScriptLoader(scriptLoader));\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n"],"sourceRoot":""}
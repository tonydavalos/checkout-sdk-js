{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/common/dom/mutation-observer.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/order/order-params.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal-client.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/order/spam-protection/create-spam-protection.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","ShippingStrategyActionType","CheckoutActionType","standard_error_StandardError","StandardError","message","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","RequestError","response","_a","_b","errors","_c","ConfigActionType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","ContentType","SpamProtectionActionType","PaymentActionType","InvalidArgumentError","HOSTED","OFFLINE","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","PaymentMethodInvalidError","ErrorActionType","PaymentMethodActionCreator","_requestSender","loadPaymentMethods","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","timeout","Accept","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","data","_common_utility__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","result","concat","map","item","amountTransformer","amount_transformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","map_to_internal_line_item","mapToInternalLineItemType","INTERNAL_USE_ONLY","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","getKey","args","_i","arguments","_resolveMap","apply","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","bindDecorator","target","descriptor","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","method","boundMethod","set","CheckoutIncludes","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","isPrivate","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","action","payload","AmountTransformer","_decimalPlaces","Math","round","pow","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","test","anchor","document","createElement","href","hash","hostname","pathname","port","protocol","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","useCache","fn","resolver","instanceMethods","cache_key_resolver","external_lodash_","external_rxjs_","pipe","operators_","store","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","loadCheckout","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","LoadCheckoutFailed","loadDefaultCheckout","context","getState","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","updateCheckout","checkout","getCheckout","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","consignment","state","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","request","DEFAULT_PARAMS","join","ConsignmentRequestSender","put","delete","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","request_error","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","timeout_error","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","error_actions","ClearError","isClearErrorAction","omit_deep","DEFAULT_STATE","statuses","billingAddressReducer","data_store_","dataReducer","errorsReducer","statusesReducer","reducer","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","loadError","UpdateBillingAddressRequested","updateError","UpdateBillingAddressFailed","ContinueAsGuestRequested","continueAsGuestError","ContinueAsGuestFailed","isLoading","isUpdating","isContinuingAsGuest","cart_reducer_DEFAULT_STATE","cartReducer","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_reducer_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","initializeError","InitializeButtonFailed","DeinitializeButtonRequested","deinitializeError","DeinitializeButtonFailed","isInitializing","isDeinitializing","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_reducer_DEFAULT_STATE","couponReducer","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","applyCouponError","ApplyCouponFailed","RemoveCouponRequested","removeCouponError","RemoveCouponFailed","isApplyingCoupon","isRemovingCoupon","gift_certificate_reducer_DEFAULT_STATE","giftCertificateReducer","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","applyGiftCertificateError","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","removeGiftCertificateError","RemoveGiftCertificateFailed","isApplyingGiftCertificate","isRemovingGiftCertificate","customer_reducer_DEFAULT_STATE","customerReducer","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","customerStrategyReducer","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isSigningIn","isSigningOut","isWidgetInteracting","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_reducer_DEFAULT_STATE","orderReducer","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","spam_protection_actions","Completed","spamProtectionToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","gateway","newArray","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","settings","UpdateRemoteCheckout","consignment_reducer_DEFAULT_STATE","updateShippingOptionError","isUpdatingShippingOption","consignmentReducer","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","_d","_e","_f","isLoadingShippingOptions","isCreating","shipping_country_reducer_DEFAULT_STATE","shippingCountryReducer","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","shippingStrategyReducer","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","checkout_reducer_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","billing_address_selector","BillingAddressSelector","_billingAddress","getBillingAddress","getUpdateError","getContinueAsGuestError","getLoadError","selector_decorator","cart_selector","CartSelector","_cart","checkout_button_selector","CheckoutButtonSelector","_checkoutButton","getInitializeError","getDeinitializeError","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","config_selector","ConfigSelector","_config","getConfig","getStoreConfig","storeConfig","getExternalSource","externalSource","coupon_selector","CouponSelector","_coupon","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","gift_certificate_selector","GiftCertificateSelector","_giftCertificate","getGiftCertificates","customer_selector","CustomerSelector","_customer","getCustomer","CustomerStrategySelector","_customerStrategies","getSignInError","getSignOutError","getWidgetInteractionError","form_selector","FormSelector","getShippingAddressFields","countries","countryCode","selectedCountry","formFields","shippingAddressFields","field","_processField","getBillingAddressFields","billingAddressFields","_processCountry","_processProvince","_processsPostCode","country","items","label","fieldType","itemtype","subdivisions","required","hasPostalCodes","Boolean","country_selector","CountrySelector","_countries","getCountries","order_selector","OrderSelector","_order","_coupons","getOrder","getOrderMeta","payment_method_selector","PaymentMethodSelector","_paymentMethods","getPaymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","payment_strategy_selector","PaymentStrategySelector","_paymentStrategies","getExecuteError","getFinalizeError","getWidgetInteractingError","payment_selector","PaymentSelector","_checkout","getPaymentId","internalPayment","_getInternalPayment","providerId","_getHostedPayment","_getGatewayPayment","getPaymentStatus","replace","step","getPaymentToken","getPaymentRedirectUrl","redirectUrl","isPaymentDataRequired","useStoreCredit","grandTotal","getGrandTotal","isPaymentDataSubmitted","paymentMethod","nonce","payment_status_types","payments","providerType","payment_method_types","InstrumentSelector","_instruments","getInstruments","getInstrumentsMeta","getDeleteError","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","shipping_address_selector","ShippingAddressSelector","_consignments","getShippingAddress","shipping_country_selector","ShippingCountrySelector","_shippingCountries","getShippingCountries","shipping_strategy_selector","ShippingStrategySelector","_shippingStrategies","getUpdateAddressError","getSelectOptionError","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","consignment_selector","ConsignmentSelector","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","getUpdateShippingOptionError","isAssigningItems","checkout_selector","CheckoutSelector","_giftCertificates","storeCredit","max","createInternalCheckoutSelectors","checkoutButton","customerStrategies","customer_strategy_selector","form","instruments","instrument_selector","paymentMethods","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","stateTransformer","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","mapToInternalCoupon","couponTypes","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","checkout_button_error_selector","CheckoutButtonErrorSelector","getInitializeButtonError","getDeinitializeButtonError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonStrategyActionCreator","_registry","_paymentMethodActionCreator","throw_error_action","checkout_button_method_type","BraintreePaypalButtonStrategy","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","bind_decorator","masterpass_button_strategy","MasterpassButtonStrategy","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","get_callback_url","PaypalButtonStrategy","_host","merchantId","clientId","actions","internal_api_headers","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","create_checkout_store","requestSender","request_sender_","formPoster","form_poster_","checkout_button_initializer","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","script_loader_","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","create_googlepay_payment_processor","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","NotEmbeddableError","UnknownError","standard_error","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","reject","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","STORAGE_PREFIX","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","TimeoutError","selectorDecorator","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","selectorMethodDecorator","joinIncludes","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","continueAsGuest","credentials","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","customerId","fullName","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","ErrorActionCreator","clearError","getEnvironment","process","NODE_ENV","e","ConsoleLogger","_console","log","messages","_logToConsole","info","warn","debug","NoopLogger","isEnabled","logger","console_logger","console","noop_logger","getDefaultLogger","CouponActionCreator","_couponRequestSender","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","GiftCertificateActionCreator","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","CustomerStrategyActionCreator","_strategyRegistry","signIn","signOut","widgetInteraction","AmazonPayScriptLoader","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","JPMC","RemoteCheckoutRequestSender","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","CustomerActionCreator","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutActionCreator","amazonOptions","not_implemented_error","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","BraintreeVisaCheckoutCustomerStrategy","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","braintreevisacheckout","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","CountryActionCreator","_countryRequestSender","loadCountries","CountryRequestSender","Accept-Language","OrderRequestSender","loadOrder","submitOrder","finalizeOrder","OrderActionCreator","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","_executeSpamProtection","checkoutSettings","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","execute","MutationObserverFactory","callback","MutationObserver","SpamProtectionFailedError","SpamProtectionNotCompletedError","GoogleRecaptcha","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","error-callback","spam_protection_failed_error","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","spam_protection_not_completed_error","observe","attributeFilter","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","grecaptcha","SpamProtectionActionCreator","_googleRecaptcha","recaptchaSitekey","googleRecaptchaSitekey","SubmitFailed","PaymentStrategyType","OrderFinalizationNotRequiredError","payment_strategy_type","PaymentStrategyActionCreator","_orderActionCreator","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","CartChangedError","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","isVaultedInstrument","OrderIncludes","PaymentActionCreator","_paymentRequestSender","submitPayment","SubmitPaymentRequested","_getPaymentRequestBody","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","map_to_internal_customer","authToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","geoCountryCode","source","paymentMethodSelector","PaymentRequestSender","_transformResponse","statusText","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","paymentSettings","PaymentArgumentInvalidError","invalidFields","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_affirmScriptLoader","publicKey","affirm","_affirm","payment_argument_invalid_error","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","_g","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","affirmJs","Function","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","_redirectToAfterpay","afterpay","orderPayload","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","AfterPay","isInternalAddressEqual","ignoredKeys","is_private","mapFromInternalAddress","AmazonPayPaymentStrategy","_billingAddressActionCreator","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","Overlay","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","promise","cancellable","cancel","race","BraintreePaymentProcessor","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","cancellable_promise","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","shouldSaveInstrument","tokenizedCard","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","BraintreeVisaCheckoutPaymentStrategy","_paymentStrategyActionCreator","visaInitOptions","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","chasepay_payment_strategy","ChasePayPaymentStrategy","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","ConvergePaymentStrategy","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","CreditCardPaymentStrategy","CyberSourcePaymentStrategy","_cardinalClient","_placeOrderUsing3DS","_placeOrder","runBindProcess","getThreeDSecureData","_getOrderData","CardinalSignatureValidationErrors","CardBrand","DigitalWalletType","CardinalClient","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","setup","Init","jwt","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","ErrorDescription","Failure","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","CCA","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","CardinalScriptLoader","Cardinal","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","StripeV3PaymentStrategy","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","mount","_cardElement","_getStripeJs","handleCardPayment","_mapStripeCardPaymentOptions","stripeResponse","paymentIntent","unmount","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","payment_method_data","billing_details","shippingDetails","receipt_email","StripeV3ScriptLoader","publishableKey","Stripe","betas","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","PaymentMethodDeclinedError","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","payment_method_declined_error","onCheckout","openModal","externalId","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","payment_strategy_registry","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","checkout_validator","spamProtectionActionCreator","spam_protection_action_creator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","paymentStrategyActionCreator","payment_strategy_action_creator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","CYBERSOURCE","cybersource_payment_strategy","cardinal_client","cardinal_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","STRIPEV3","stripev3_payment_strategy","stripev3_script_loader","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","shopperCurrency","isTransactional","InstrumentResponseTransformer","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","iin","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","selectOption","mergedOptions","AmazonPayShippingStrategy","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","checkout_store_selector","CheckoutStoreSelector","_form","_payment","_shippingAddress","getShippingOptions","availableShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","checkout_store_error_selector","CheckoutStoreErrorSelector","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getSelectShippingOptionError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getUpdateCheckoutError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isSelectingShippingOption","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isUpdatingCheckout","createCheckoutSelectors","ErrorMessageTransformer","_messageCustomizer","input","trim","CheckoutService","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_errorTransformer","error_message_transformer","isCheckoutServiceError","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","createCheckoutService","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","google_recaptcha","google_recaptcha_script_loader","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","createCustomerStrategyRegistry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","create_checkout_button_initializer","embed_checkout","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","mapToInternalCart","promotions","notifications","map_to_internal_line_items","map_to_internal_coupon","promotion","banners","banner","placeholders","messageHtml","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 139);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"iframe-resizer\");","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection/spam-protection-actions';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n    case SpamProtectionActionType.Completed:\n        return action.payload ? {\n            ...meta,\n            spamProtectionToken: action.payload,\n        } : meta;\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                updateError: {\n                    ...errors.updateError,\n                    [action.meta.id]: undefined,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                updateError: {\n                    ...errors.updateError,\n                    [action.meta.id]: action.payload,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                deleteError: {\n                    ...errors.deleteError,\n                    [action.meta.id]: undefined,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                deleteError: {\n                    ...errors.deleteError,\n                    [action.meta.id]: action.payload,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                updateShippingOptionError: {\n                    ...errors.updateShippingOptionError,\n                    [action.meta.id]: undefined,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                updateShippingOptionError: {\n                    ...errors.updateShippingOptionError,\n                    [action.meta.id]: action.payload,\n                },\n            };\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isUpdating: {\n                    ...statuses.isUpdating,\n                    [action.meta.id]: true,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isUpdating: {\n                    ...statuses.isUpdating,\n                    [action.meta.id]: false,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isDeleting: {\n                    ...statuses.isDeleting,\n                    [action.meta.id]: true,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isDeleting: {\n                    ...statuses.isDeleting,\n                    [action.meta.id]: false,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isUpdatingShippingOption: {\n                    ...statuses.isUpdatingShippingOption,\n                    [action.meta.id]: true,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isUpdatingShippingOption: {\n                    ...statuses.isUpdatingShippingOption,\n                    [action.meta.id]: false,\n                },\n            };\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const grandTotal = this._checkout.getGrandTotal(useStoreCredit);\n\n        return grandTotal ? grandTotal > 0 : false;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { Address } from '../address';\nimport { selector } from '../common/selector';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getGrandTotal(useStoreCredit?: boolean): number | undefined {\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionActionCreator } from './spam-protection';\nimport { SpamProtectionAction } from './spam-protection/spam-protection-actions';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            this._executeSpamProtection(store),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _executeSpamProtection(store: ReadableCheckoutStore): Observable<SpamProtectionAction> {\n        const storeConfig = store.getState().config.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n        if (!isSpamProtectionEnabled) {\n            return empty();\n        }\n\n        return this._spamProtectionActionCreator.execute();\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        })\n\n        .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._getPaymentRequestBody({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(state.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((resolve, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import Address from '../../../address/address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CreditCardInstrument } from '../../payment';\n\nexport const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData: CreditCardInstrument;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress: CardinalAddress;\n    Account: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport Payment, { CreditCardInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { CardinalClient, CardinalOrderData } from './index';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(this._paymentMethod.config.testMode)\n                    .then(() => this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.config) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paymentMethod.config.is3dsEnabled ? this._placeOrderUsing3DS(order, payment, options, this._paymentMethod.clientToken) :\n            this._placeOrder(order, payment, options);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _placeOrderUsing3DS(order: OrderRequestBody, payment: OrderPaymentRequestBody, options?: PaymentRequestOptions, clientToken?: string): Promise<InternalCheckoutSelectors> {\n        if (!clientToken) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n\n        if (!payment.paymentData) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPayment));\n        }\n\n        const paymentData = payment.paymentData as CreditCardInstrument;\n\n        return this._cardinalClient.configure(clientToken)\n            .then(() => this._cardinalClient.runBindProcess(paymentData.ccNumber))\n            .then(() => {\n                return this._placeOrder(order, payment, options)\n                    .catch(error => {\n                        if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'enrolled_card' })) {\n                            return Promise.reject(error);\n                        }\n\n                        return this._cardinalClient.getThreeDSecureData(error.body.three_ds_result, this._getOrderData(paymentData))\n                            .then(threeDSecure =>\n                                this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                    ...payment,\n                                    paymentData: {\n                                        ...paymentData,\n                                        threeDSecure,\n                                    },\n                                }))\n                            );\n                    });\n            });\n    }\n\n    private _placeOrder(order: OrderRequestBody, payment: OrderPaymentRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPayment));\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            );\n    }\n\n    private _getOrderData(paymentData: CreditCardInstrument): CardinalOrderData {\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n        const checkout = this._store.getState().checkout.getCheckout();\n        const order = this._store.getState().order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        return {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n            paymentData,\n        };\n    }\n}\n","import { includes } from 'lodash';\n\nimport Address from '../../../address/address';\nimport {\n    MissingDataError, MissingDataErrorType, NotInitializedError,\n    NotInitializedErrorType, StandardError\n} from '../../../common/error/errors';\nimport { CreditCardInstrument, ThreeDSecureToken } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalOrderData,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n        }));\n    }\n\n    runBindProcess(ccNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, ccNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt: string) => {\n                        client.off(CardinalEventType.Validated);\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                resolve({ token: jwt });\n                                break;\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    reject(new StandardError(data.ErrorDescription));\n                                } else {\n                                    resolve({ token: jwt });\n                                }\n                                break;\n                            case CardinalValidatedAction.Failure:\n                                reject(new StandardError('User failed authentication or an error was encountered while processing the transaction'));\n                                break;\n                            case CardinalValidatedAction.Error:\n                                reject(new StandardError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n        });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n            Account: this._mapToCardinalAccount(orderData.paymentData),\n        };\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<CardinalSDK> {\n        return this._scriptLoader\n            .loadScript(testMode ? SDK_TEST_URL : SDK_PROD_URL)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new StandardError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError, NotInitializedErrorType,\n    StandardError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._cardElement) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                return this._getStripeJs().handleCardPayment(\n                    paymentMethod.clientToken, this._cardElement, this._mapStripeCardPaymentOptions()\n                ).then(stripeResponse => {\n                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                        throw new StandardError(stripeResponse.error && stripeResponse.error.message);\n                    }\n\n                    const paymentPayload = {\n                        methodId: payment.methodId,\n                        paymentData: { nonce: stripeResponse.paymentIntent.id },\n                    };\n\n                    return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n                        .then(() =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload))\n                        );\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.postalCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.postalCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const paymentMethodData = {\n            payment_method_data: {\n                billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n            },\n        };\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (billingAddress) {\n            if (customer) {\n                return {\n                    ...paymentMethodData,\n                    ...shippingDetails,\n                    receipt_email: customer.email,\n                };\n            } else {\n                return {\n                    ...paymentMethodData,\n                    ...shippingDetails,\n                    receipt_email: billingAddress.email,\n                };\n            }\n        }\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new StandardError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n        const useStoreCredit = !!payload.useStoreCredit;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(payment.methodId, { useStoreCredit })\n            ))\n            .then(()  => {\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options))\n                    .then(state => {\n                        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n                    })\n                    .then(() => new Promise<string | undefined>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                                    return this._prepareForReferredRegistration(payment.methodId, checkoutId)\n                                        .then(() => resolve());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                if (state === ZipModalEvent.CheckoutDeclined) {\n                                    return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce => {\n                        if (nonce !== undefined) {\n                            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                methodId: payment.methodId,\n                                paymentData: { nonce },\n                            }));\n                        }\n\n                        return this._store.getState();\n                    }\n                    ));\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CyberSourcePaymentStrategy\n} from './strategies/cybersource';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalClient(new CardinalScriptLoader(scriptLoader))\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n            )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n"],"sourceRoot":""}